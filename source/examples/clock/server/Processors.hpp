////////////////////////////////////////////////////////////////////////
/// Copyright (c) 1988-2014 $organization$
///
/// This software is provided by the author and contributors ``as is''
/// and any express or implied warranties, including, but not limited to,
/// the implied warranties of merchantability and fitness for a particular
/// purpose are disclaimed. In no event shall the author or contributors
/// be liable for any direct, indirect, incidental, special, exemplary,
/// or consequential damages (including, but not limited to, procurement
/// of substitute goods or services; loss of use, data, or profits; or
/// business interruption) however caused and on any theory of liability,
/// whether in contract, strict liability, or tort (including negligence
/// or otherwise) arising in any way out of the use of this software,
/// even if advised of the possibility of such damage.
///
///   File: Processors.hpp
///
/// Author: $author$
///   Date: 1/7/2014
////////////////////////////////////////////////////////////////////////
#if !defined(_RESTAPP_EXAMPLES_CLOCK_SERVER_PROCESSORS_HPP)
#define _RESTAPP_EXAMPLES_CLOCK_SERVER_PROCESSORS_HPP

#include "RestApp.hpp"

namespace restapp {
namespace examples {
namespace clock {
namespace server {

typedef restapp::ProcessorImplement ProcessorImplement;
typedef restapp::Processor ProcessorExtend;

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS RestartServiceProcessor
: virtual public ProcessorImplement, public ProcessorExtend {
public:
    typedef ProcessorImplement Implements;
    typedef ProcessorExtend Extends;
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    RestartServiceProcessor(const String& path): Extends(path) {
    }
    RestartServiceProcessor(): Extends(ThePath()) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual bool Any
    (Response& response, const Request& request, const String& method) {
        XOS_LOG_TRACE("in...");
        bool processed = true;
        bool result = false;
        Process(processed, result);
        XOS_LOG_TRACE("\"result\" = " << result);
        response.Put("result", result);
        XOS_LOG_TRACE("...out");
        return processed;
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual void Process(bool& processed, bool& result) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    static String& ThePath() {
        static String thePath("/restapp/examples/clock/RestartService");
        return thePath;
    }
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS StopServiceProcessor
: virtual public ProcessorImplement, public ProcessorExtend {
public:
    typedef ProcessorImplement Implements;
    typedef ProcessorExtend Extends;
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    StopServiceProcessor(const String& path): Extends(path) {
    }
    StopServiceProcessor(): Extends(ThePath()) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual bool Any
    (Response& response, const Request& request, const String& method) {
        XOS_LOG_TRACE("in...");
        bool processed = true;
        bool result = false;
        Process(processed, result);
        XOS_LOG_TRACE("\"result\" = " << result);
        response.Put("result", result);
        XOS_LOG_TRACE("...out");
        return processed;
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual void Process(bool& processed, bool& result) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    static String& ThePath() {
        static String thePath("/restapp/examples/clock/StopService");
        return thePath;
    }
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS StartProcessor
: virtual public ProcessorImplement, public ProcessorExtend {
public:
    typedef ProcessorImplement Implements;
    typedef ProcessorExtend Extends;
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    StartProcessor(const String& path): Extends(path) {
    }
    StartProcessor(): Extends(ThePath()) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual bool Any
    (Response& response, const Request& request, const String& method) {
        bool processed = true;
        bool result = false;
        Process(processed, result);
        XOS_LOG_TRACE("\"result\" = " << result);
        response.Put("result", result);
        return processed;
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual void Process(bool& processed, bool& result) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    static String& ThePath() {
        static String thePath("/restapp/examples/clock/Start");
        return thePath;
    }
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS StopProcessor
: virtual public ProcessorImplement, public ProcessorExtend {
public:
    typedef ProcessorImplement Implements;
    typedef ProcessorExtend Extends;
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    StopProcessor(const String& path): Extends(path) {
    }
    StopProcessor(): Extends(ThePath()) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual bool Any
    (Response& response, const Request& request, const String& method) {
        bool processed = true;
        bool result = false;
        Process(processed, result);
        XOS_LOG_TRACE("\"result\" = " << result);
        response.Put("result", result);
        return processed;
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual void Process(bool& processed, bool& result) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    static String& ThePath() {
        static String thePath("/restapp/examples/clock/Stop");
        return thePath;
    }
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS TickProcessor
: virtual public ProcessorImplement, public ProcessorExtend {
public:
    typedef ProcessorImplement Implements;
    typedef ProcessorExtend Extends;
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    TickProcessor(const String& path): Extends(path) {
    }
    TickProcessor(): Extends(ThePath()) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual bool Any
    (Response& response, const Request& request, const String& method) {
        bool processed = true;
        bool result = false;
        Process(processed, result);
        XOS_LOG_TRACE("\"result\" = " << result);
        response.Put("result", result);
        return processed;
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual void Process(bool& processed, bool& result) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    static String& ThePath() {
        static String thePath("/restapp/examples/clock/Tick");
        return thePath;
    }
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS SetTickSecondsProcessor
: virtual public ProcessorImplement, public ProcessorExtend {
public:
    typedef ProcessorImplement Implements;
    typedef ProcessorExtend Extends;
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SetTickSecondsProcessor(const String& path): Extends(path) {
    }
    SetTickSecondsProcessor(): Extends(ThePath()) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual bool Any
    (Response& response, const Request& request, const String& method) {
        bool processed = true;
        int result = 0;
        int to = 0;
        request.Get(to, "to");
        XOS_LOG_TRACE("\"to\" = " << to);
        Process(processed, result, to);
        XOS_LOG_TRACE("\"result\" = " << result);
        response.Put("result", result);
        return processed;
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual void Process(bool& processed, int& result, const int& to) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    static String& ThePath() {
        static String thePath("/restapp/examples/clock/SetTickSeconds");
        return thePath;
    }
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS GetTickSecondsProcessor
: virtual public ProcessorImplement, public ProcessorExtend {
public:
    typedef ProcessorImplement Implements;
    typedef ProcessorExtend Extends;
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    GetTickSecondsProcessor(const String& path): Extends(path) {
    }
    GetTickSecondsProcessor(): Extends(ThePath()) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual bool Any
    (Response& response, const Request& request, const String& method) {
        bool processed = true;
        int result = 0;
        Process(processed, result);
        XOS_LOG_TRACE("\"result\" = " << result);
        response.Put("result", result);
        return processed;
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual void Process(bool& processed, int& result) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    static String& ThePath() {
        static String thePath("/restapp/examples/clock/GetTickSeconds");
        return thePath;
    }
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS AddTickEventListenerProcessor
: virtual public ProcessorImplement, public ProcessorExtend {
public:
    typedef ProcessorImplement Implements;
    typedef ProcessorExtend Extends;
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    AddTickEventListenerProcessor(const String& path): Extends(path) {
    }
    AddTickEventListenerProcessor(): Extends(ThePath()) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual bool Any
    (Response& response, const Request& request, const String& method) {
        bool processed = true;
        int result = 0;
        Process(processed, result);
        XOS_LOG_TRACE("\"result\" = " << result);
        response.Put("result", result);
        return processed;
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual void Process(bool& processed, int& result) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    static String& ThePath() {
        static String thePath("/restapp/examples/clock/AddTickEventListener");
        return thePath;
    }
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS RemoveTickEventListenerProcessor
: virtual public ProcessorImplement, public ProcessorExtend {
public:
    typedef ProcessorImplement Implements;
    typedef ProcessorExtend Extends;
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    RemoveTickEventListenerProcessor(const String& path): Extends(path) {
    }
    RemoveTickEventListenerProcessor(): Extends(ThePath()) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual bool Any
    (Response& response, const Request& request, const String& method) {
        bool processed = true;
        int result = 0;
        Process(processed, result);
        XOS_LOG_TRACE("\"result\" = " << result);
        response.Put("result", result);
        return processed;
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual void Process(bool& processed, int& result) {
    }
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    static String& ThePath() {
        static String thePath("/restapp/examples/clock/RemoveTickEventListener");
        return thePath;
    }
};

} // namespace server
} // namespace clock
} // namespace examples
} // namespace restapp

#endif // !defined(_RESTAPP_EXAMPLES_CLOCK_SERVER_PROCESSORS_HPP)
